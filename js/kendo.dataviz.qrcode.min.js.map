{"version":3,"sources":["kendo.dataviz.qrcode.js"],"names":["f","define","defined","value","UNDEFINED","round","precision","power","pow","math","p","limitValue","min","max","rad","degrees","DEG_TO_RAD","deg","radians","isNumber","val","isNaN","valueOrDefault","defaultValue","sqr","objectKey","object","key","parts","push","sort","join","hashKey","str","i","hash","length","charCodeAt","hashObject","arrayLimits","arr","MAX_NUM","MIN_NUM","arrayMin","arrayMax","sparseArrayMin","sparseArrayLimits","sparseArrayMax","n","isFinite","undefined","last","array","append","first","second","apply","renderTemplate","text","kendo","template","useWithBlock","paramName","renderAttr","name","renderAllAttr","attrs","output","renderStyle","renderSize","size","renderPos","pos","result","toHyphens","split","isTransparent","color","arabicToRoman","literals","1","10","100","2","20","200","3","30","300","4","40","400","5","50","500","6","60","600","7","70","700","8","80","800","9","90","900","1000","values","roman","shift","romanToArabic","r","digits","prev","v","toLowerCase","x","l","c","d","m","charAt","memoize","cache","Object","create","id","arguments","this","ucs2decode","string","extra","counter","ucs2encode","map","String","fromCharCode","mergeSort","a","cmp","merge","b","ai","bi","slice","left","right","Math","floor","isUnicodeLetter","ch","RX_UNICODE_LETTER","test","window","deepExtend","PI","Number","MAX_VALUE","now","Date","getTime","util","drawing","dataviz","RegExp","amd","a1","a2","a3","$","zeroSize","width","height","baseline","measureText","style","measureBox","TextMetrics","current","measure","loadFonts","fonts","callback","promises","document","font","load","e","logToConsole","Promise","all","then","doc","Class","LRUCache","extend","init","_size","_length","_map","put","lru","entry","_head","_tail","newer","older","get","defaultMeasureBox","options","_cache","_initOptions","baselineMarkerSize","box","styleKey","cacheKey","cachedResult","baselineMarker","_baselineMarker","cloneNode","appendChild","body","offsetWidth","offsetHeight","offsetTop","parentNode","removeChild","jQuery","encodeBase64","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","encodeUTF8","KEY_STR","inArray","ObserversMixin","observers","_observers","addObserver","element","removeObserver","index","splice","trigger","methodName","event","observer","idx","_suspended","optionsChange","geometryChange","suspend","resume","_observerField","field","mixins","toDecimal","parseInt","toBitsString","toString","Array","splitInto","substring","fillFunctionCell","matrices","bit","y","fillDataCell","maskPatternConditions","generatePowersOfTwo","powersOfTwoResult","powersOfTwo","generateGeneratorPolynomials","firstPolynomial","secondPolynomial","maxErrorCorrectionCodeWordsCount","generatorPolynomials","multiplyPolynomials","multiplyByConstant","polynomial","getNumberAt","scoreFinderPatternOccurance","patterns","scores","rowColumn","finderPatternValue","scoreAdjacentSameBits","previousBits","adjacentBits","calculateDarkModulesRatioScore","darkModules","total","percent","mod5","previous","abs","next","score","modeInstances","mode","FreeCellVisitor","fillData","padDataString","xorPolynomials","generateErrorCodewords","getBlocks","chooseMode","getModes","getDataCodewordsCount","getVersion","getDataString","encodeFormatInformation","encodeBCH","dividePolynomials","initMatrices","addFormatInformation","encodeVersionInformation","addVersionInformation","addCentricPattern","addFinderSeparator","addFinderPatterns","addAlignmentPatterns","addTimingFunctions","scoreMaskMatrixes","EncodingResult","IsoEncoder","UTF8Encoder","QRCodeDataEncoder","encodeData","QRCodeDefaults","QRCode","draw","Widget","ui","Box2D","terminator","NUMERIC","ALPHA_NUMERIC","BYTE","0","irregularAlignmentPatternsStartDistance","15","16","18","19","22","24","26","28","31","32","33","36","37","39","versionsCodewordsInformation","L","groups","totalDataCodewords","errorCodewordsPerBlock","M","Q","H","finderPattern","alignmentPattern","errorCorrectionPatterns","formatMaskPattern","formatGeneratorPolynomial","versionGeneratorPolynomial","paddingCodewords","row","column","numberRegex","alphaPattern","alphaExclusiveSet","alphaRegex","alphaNumericRegex","byteRegex","initMinNumericBeforeAlpha","initMinNumericBeforeByte","initMinAlphaBeforeByte","minNumericBeforeAlpha","minNumericBeforeByte","minAlphaBeforeByte","QRDataMode","getVersionIndex","version","getBitsCharacterCount","bitsInCharacterCount","getModeCountString","modeIndicator","encode","getStringBitsLength","getValue","modes","character","inputLength","mod3","characters","A","B","C","D","E","F","G","I","J","K","N","O","P","R","S","T","U","V","W","X","Y","Z"," ","%","*","+","-",".","/",":","code","Error","matrix","that","startColumn","dir","move","getNextCell","getNextRemainderCell","blocks","block","codewordIdx","cell","blockIdx","j","cellVisitor","dataString","dataBitsCount","terminatorIndex","paddingCodewordIndex","data","errorCodewordsCount","divisor","generator","concat","generatorPolynomial","steps","errorCodewords","dataStream","versionCodewordsInformation","dataBlock","blockCodewordsCount","groupBlocksCount","messagePolynomial","codeword","groupIdx","codewordStart","dataBlocks","errorBlocks","versionGroups","previousMode","modeString","numeric","exec","numericMatch","alpha","alphaMatch","alphaNumeric","alphaNumericMatch","nextMode","substr","ceil","dataCodewordsCount","errorCorrectionLevel","format","encodedString","formatNumber","codeLength","generatorNumber","polynomialLength","valueNumber","valueString","numberX","numberY","yLength","xLength","modules","formatString","quotient","mod","x1","y1","x2","y2","pattern","direction","nextX","nextY","pointsCount","points","startDistance","distance","k","minIdx","adjacentSameBits","getEncodingResult","inputString","encodingMode","fn","prototype","utfBOM","initialModeCountStringLength","dataLength","encodeCharacter","significantOnes","bytesCount","getBytesCount","bc","ranges","encoding","indexOf","optimalMatrix","encoder","encodingResult","versionInformation","DEFAULT_SIZE","QUIET_ZONE_LENGTH","DEFAULT_ERROR_CORRECTION_LEVEL","DEFAULT_BACKGROUND","DEFAULT_DARK_MODULE_COLOR","MIN_BASE_UNIT_SIZE","call","wrapper","addClass","surfaceWrap","css","appendTo","surface","Surface","type","renderAs","setOptions","redraw","_getSize","clear","createVisual","visual","getSize","dimensions","_resize","_render","exportVisual","baseUnit","quietZoneSize","dataSize","contentSize","_value","border","padding","borderWidth","Group","errorCorrection","_calculateBaseUnit","_renderBackground","_renderMatrix","matrixSize","path","MultiPath","fill","stroke","moveTo","lineTo","close","unpad","Path","fromRect","toRect","background","ExportMixin","plugin","QRCodeFunctions","QRCodeFields"],"mappings":"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","file":"kendo.dataviz.qrcode.min.js","sourcesContent":["/*!\n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n                                                                                                                                                                                                       \n\n*/\n(function (f, define) {\n    define('util/main', ['kendo.core'], f);\n}(function () {\n    (function () {\n        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend;\n        var DEG_TO_RAD = math.PI / 180, MAX_NUM = Number.MAX_VALUE, MIN_NUM = -Number.MAX_VALUE, UNDEFINED = 'undefined';\n        function defined(value) {\n            return typeof value !== UNDEFINED;\n        }\n        function round(value, precision) {\n            var power = pow(precision);\n            return math.round(value * power) / power;\n        }\n        function pow(p) {\n            if (p) {\n                return math.pow(10, p);\n            } else {\n                return 1;\n            }\n        }\n        function limitValue(value, min, max) {\n            return math.max(math.min(value, max), min);\n        }\n        function rad(degrees) {\n            return degrees * DEG_TO_RAD;\n        }\n        function deg(radians) {\n            return radians / DEG_TO_RAD;\n        }\n        function isNumber(val) {\n            return typeof val === 'number' && !isNaN(val);\n        }\n        function valueOrDefault(value, defaultValue) {\n            return defined(value) ? value : defaultValue;\n        }\n        function sqr(value) {\n            return value * value;\n        }\n        function objectKey(object) {\n            var parts = [];\n            for (var key in object) {\n                parts.push(key + object[key]);\n            }\n            return parts.sort().join('');\n        }\n        function hashKey(str) {\n            var hash = 2166136261;\n            for (var i = 0; i < str.length; ++i) {\n                hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n                hash ^= str.charCodeAt(i);\n            }\n            return hash >>> 0;\n        }\n        function hashObject(object) {\n            return hashKey(objectKey(object));\n        }\n        var now = Date.now;\n        if (!now) {\n            now = function () {\n                return new Date().getTime();\n            };\n        }\n        function arrayLimits(arr) {\n            var length = arr.length, i, min = MAX_NUM, max = MIN_NUM;\n            for (i = 0; i < length; i++) {\n                max = math.max(max, arr[i]);\n                min = math.min(min, arr[i]);\n            }\n            return {\n                min: min,\n                max: max\n            };\n        }\n        function arrayMin(arr) {\n            return arrayLimits(arr).min;\n        }\n        function arrayMax(arr) {\n            return arrayLimits(arr).max;\n        }\n        function sparseArrayMin(arr) {\n            return sparseArrayLimits(arr).min;\n        }\n        function sparseArrayMax(arr) {\n            return sparseArrayLimits(arr).max;\n        }\n        function sparseArrayLimits(arr) {\n            var min = MAX_NUM, max = MIN_NUM;\n            for (var i = 0, length = arr.length; i < length; i++) {\n                var n = arr[i];\n                if (n !== null && isFinite(n)) {\n                    min = math.min(min, n);\n                    max = math.max(max, n);\n                }\n            }\n            return {\n                min: min === MAX_NUM ? undefined : min,\n                max: max === MIN_NUM ? undefined : max\n            };\n        }\n        function last(array) {\n            if (array) {\n                return array[array.length - 1];\n            }\n        }\n        function append(first, second) {\n            first.push.apply(first, second);\n            return first;\n        }\n        function renderTemplate(text) {\n            return kendo.template(text, {\n                useWithBlock: false,\n                paramName: 'd'\n            });\n        }\n        function renderAttr(name, value) {\n            return defined(value) && value !== null ? ' ' + name + '=\\'' + value + '\\' ' : '';\n        }\n        function renderAllAttr(attrs) {\n            var output = '';\n            for (var i = 0; i < attrs.length; i++) {\n                output += renderAttr(attrs[i][0], attrs[i][1]);\n            }\n            return output;\n        }\n        function renderStyle(attrs) {\n            var output = '';\n            for (var i = 0; i < attrs.length; i++) {\n                var value = attrs[i][1];\n                if (defined(value)) {\n                    output += attrs[i][0] + ':' + value + ';';\n                }\n            }\n            if (output !== '') {\n                return output;\n            }\n        }\n        function renderSize(size) {\n            if (typeof size !== 'string') {\n                size += 'px';\n            }\n            return size;\n        }\n        function renderPos(pos) {\n            var result = [];\n            if (pos) {\n                var parts = kendo.toHyphens(pos).split('-');\n                for (var i = 0; i < parts.length; i++) {\n                    result.push('k-pos-' + parts[i]);\n                }\n            }\n            return result.join(' ');\n        }\n        function isTransparent(color) {\n            return color === '' || color === null || color === 'none' || color === 'transparent' || !defined(color);\n        }\n        function arabicToRoman(n) {\n            var literals = {\n                1: 'i',\n                10: 'x',\n                100: 'c',\n                2: 'ii',\n                20: 'xx',\n                200: 'cc',\n                3: 'iii',\n                30: 'xxx',\n                300: 'ccc',\n                4: 'iv',\n                40: 'xl',\n                400: 'cd',\n                5: 'v',\n                50: 'l',\n                500: 'd',\n                6: 'vi',\n                60: 'lx',\n                600: 'dc',\n                7: 'vii',\n                70: 'lxx',\n                700: 'dcc',\n                8: 'viii',\n                80: 'lxxx',\n                800: 'dccc',\n                9: 'ix',\n                90: 'xc',\n                900: 'cm',\n                1000: 'm'\n            };\n            var values = [\n                1000,\n                900,\n                800,\n                700,\n                600,\n                500,\n                400,\n                300,\n                200,\n                100,\n                90,\n                80,\n                70,\n                60,\n                50,\n                40,\n                30,\n                20,\n                10,\n                9,\n                8,\n                7,\n                6,\n                5,\n                4,\n                3,\n                2,\n                1\n            ];\n            var roman = '';\n            while (n > 0) {\n                if (n < values[0]) {\n                    values.shift();\n                } else {\n                    roman += literals[values[0]];\n                    n -= values[0];\n                }\n            }\n            return roman;\n        }\n        function romanToArabic(r) {\n            r = r.toLowerCase();\n            var digits = {\n                i: 1,\n                v: 5,\n                x: 10,\n                l: 50,\n                c: 100,\n                d: 500,\n                m: 1000\n            };\n            var value = 0, prev = 0;\n            for (var i = 0; i < r.length; ++i) {\n                var v = digits[r.charAt(i)];\n                if (!v) {\n                    return null;\n                }\n                value += v;\n                if (v > prev) {\n                    value -= 2 * prev;\n                }\n                prev = v;\n            }\n            return value;\n        }\n        function memoize(f) {\n            var cache = Object.create(null);\n            return function () {\n                var id = '';\n                for (var i = arguments.length; --i >= 0;) {\n                    id += ':' + arguments[i];\n                }\n                return id in cache ? cache[id] : cache[id] = f.apply(this, arguments);\n            };\n        }\n        function ucs2decode(string) {\n            var output = [], counter = 0, length = string.length, value, extra;\n            while (counter < length) {\n                value = string.charCodeAt(counter++);\n                if (value >= 55296 && value <= 56319 && counter < length) {\n                    extra = string.charCodeAt(counter++);\n                    if ((extra & 64512) == 56320) {\n                        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);\n                    } else {\n                        output.push(value);\n                        counter--;\n                    }\n                } else {\n                    output.push(value);\n                }\n            }\n            return output;\n        }\n        function ucs2encode(array) {\n            return array.map(function (value) {\n                var output = '';\n                if (value > 65535) {\n                    value -= 65536;\n                    output += String.fromCharCode(value >>> 10 & 1023 | 55296);\n                    value = 56320 | value & 1023;\n                }\n                output += String.fromCharCode(value);\n                return output;\n            }).join('');\n        }\n        function mergeSort(a, cmp) {\n            if (a.length < 2) {\n                return a.slice();\n            }\n            function merge(a, b) {\n                var r = [], ai = 0, bi = 0, i = 0;\n                while (ai < a.length && bi < b.length) {\n                    if (cmp(a[ai], b[bi]) <= 0) {\n                        r[i++] = a[ai++];\n                    } else {\n                        r[i++] = b[bi++];\n                    }\n                }\n                if (ai < a.length) {\n                    r.push.apply(r, a.slice(ai));\n                }\n                if (bi < b.length) {\n                    r.push.apply(r, b.slice(bi));\n                }\n                return r;\n            }\n            return function sort(a) {\n                if (a.length <= 1) {\n                    return a;\n                }\n                var m = Math.floor(a.length / 2);\n                var left = a.slice(0, m);\n                var right = a.slice(m);\n                left = sort(left);\n                right = sort(right);\n                return merge(left, right);\n            }(a);\n        }\n        function isUnicodeLetter(ch) {\n            return RX_UNICODE_LETTER.test(ch);\n        }\n        deepExtend(kendo, {\n            util: {\n                MAX_NUM: MAX_NUM,\n                MIN_NUM: MIN_NUM,\n                append: append,\n                arrayLimits: arrayLimits,\n                arrayMin: arrayMin,\n                arrayMax: arrayMax,\n                defined: defined,\n                deg: deg,\n                hashKey: hashKey,\n                hashObject: hashObject,\n                isNumber: isNumber,\n                isTransparent: isTransparent,\n                last: last,\n                limitValue: limitValue,\n                now: now,\n                objectKey: objectKey,\n                round: round,\n                rad: rad,\n                renderAttr: renderAttr,\n                renderAllAttr: renderAllAttr,\n                renderPos: renderPos,\n                renderSize: renderSize,\n                renderStyle: renderStyle,\n                renderTemplate: renderTemplate,\n                sparseArrayLimits: sparseArrayLimits,\n                sparseArrayMin: sparseArrayMin,\n                sparseArrayMax: sparseArrayMax,\n                sqr: sqr,\n                valueOrDefault: valueOrDefault,\n                romanToArabic: romanToArabic,\n                arabicToRoman: arabicToRoman,\n                memoize: memoize,\n                ucs2encode: ucs2encode,\n                ucs2decode: ucs2decode,\n                mergeSort: mergeSort,\n                isUnicodeLetter: isUnicodeLetter\n            }\n        });\n        kendo.drawing.util = kendo.util;\n        kendo.dataviz.util = kendo.util;\n        var RX_UNICODE_LETTER = new RegExp('[\\\\u0041-\\\\u005A\\\\u0061-\\\\u007A\\\\u00AA\\\\u00B5\\\\u00BA\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]');\n    }());\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('util/text-metrics', [\n        'kendo.core',\n        'util/main'\n    ], f);\n}(function () {\n    (function ($) {\n        var doc = document, kendo = window.kendo, Class = kendo.Class, util = kendo.util, defined = util.defined;\n        var LRUCache = Class.extend({\n            init: function (size) {\n                this._size = size;\n                this._length = 0;\n                this._map = {};\n            },\n            put: function (key, value) {\n                var lru = this, map = lru._map, entry = {\n                        key: key,\n                        value: value\n                    };\n                map[key] = entry;\n                if (!lru._head) {\n                    lru._head = lru._tail = entry;\n                } else {\n                    lru._tail.newer = entry;\n                    entry.older = lru._tail;\n                    lru._tail = entry;\n                }\n                if (lru._length >= lru._size) {\n                    map[lru._head.key] = null;\n                    lru._head = lru._head.newer;\n                    lru._head.older = null;\n                } else {\n                    lru._length++;\n                }\n            },\n            get: function (key) {\n                var lru = this, entry = lru._map[key];\n                if (entry) {\n                    if (entry === lru._head && entry !== lru._tail) {\n                        lru._head = entry.newer;\n                        lru._head.older = null;\n                    }\n                    if (entry !== lru._tail) {\n                        if (entry.older) {\n                            entry.older.newer = entry.newer;\n                            entry.newer.older = entry.older;\n                        }\n                        entry.older = lru._tail;\n                        entry.newer = null;\n                        lru._tail.newer = entry;\n                        lru._tail = entry;\n                    }\n                    return entry.value;\n                }\n            }\n        });\n        var defaultMeasureBox = $('<div style=\\'position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;' + 'padding: 0 !important; margin: 0 !important; border: 0 !important;' + 'line-height: normal !important; visibility: hidden !important; white-space: nowrap!important;\\' />')[0];\n        function zeroSize() {\n            return {\n                width: 0,\n                height: 0,\n                baseline: 0\n            };\n        }\n        var TextMetrics = Class.extend({\n            init: function (options) {\n                this._cache = new LRUCache(1000);\n                this._initOptions(options);\n            },\n            options: { baselineMarkerSize: 1 },\n            measure: function (text, style, box) {\n                if (!text) {\n                    return zeroSize();\n                }\n                var styleKey = util.objectKey(style), cacheKey = util.hashKey(text + styleKey), cachedResult = this._cache.get(cacheKey);\n                if (cachedResult) {\n                    return cachedResult;\n                }\n                var size = zeroSize();\n                var measureBox = box ? box : defaultMeasureBox;\n                var baselineMarker = this._baselineMarker().cloneNode(false);\n                for (var key in style) {\n                    var value = style[key];\n                    if (defined(value)) {\n                        measureBox.style[key] = value;\n                    }\n                }\n                $(measureBox).text(text);\n                measureBox.appendChild(baselineMarker);\n                doc.body.appendChild(measureBox);\n                if ((text + '').length) {\n                    size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;\n                    size.height = measureBox.offsetHeight;\n                    size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;\n                }\n                if (size.width > 0 && size.height > 0) {\n                    this._cache.put(cacheKey, size);\n                }\n                measureBox.parentNode.removeChild(measureBox);\n                return size;\n            },\n            _baselineMarker: function () {\n                return $('<div class=\\'k-baseline-marker\\' ' + 'style=\\'display: inline-block; vertical-align: baseline;' + 'width: ' + this.options.baselineMarkerSize + 'px; height: ' + this.options.baselineMarkerSize + 'px;' + 'overflow: hidden;\\' />')[0];\n            }\n        });\n        TextMetrics.current = new TextMetrics();\n        function measureText(text, style, measureBox) {\n            return TextMetrics.current.measure(text, style, measureBox);\n        }\n        function loadFonts(fonts, callback) {\n            var promises = [];\n            if (fonts.length > 0 && document.fonts) {\n                try {\n                    promises = fonts.map(function (font) {\n                        return document.fonts.load(font);\n                    });\n                } catch (e) {\n                    kendo.logToConsole(e);\n                }\n                Promise.all(promises).then(callback, callback);\n            } else {\n                callback();\n            }\n        }\n        kendo.util.TextMetrics = TextMetrics;\n        kendo.util.LRUCache = LRUCache;\n        kendo.util.loadFonts = loadFonts;\n        kendo.util.measureText = measureText;\n    }(window.kendo.jQuery));\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('util/base64', ['util/main'], f);\n}(function () {\n    (function () {\n        var kendo = window.kendo, deepExtend = kendo.deepExtend, fromCharCode = String.fromCharCode;\n        var KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n        function encodeBase64(input) {\n            var output = '';\n            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n            var i = 0;\n            input = encodeUTF8(input);\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n                enc1 = chr1 >> 2;\n                enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n                enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n                enc4 = chr3 & 63;\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n                output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);\n            }\n            return output;\n        }\n        function encodeUTF8(input) {\n            var output = '';\n            for (var i = 0; i < input.length; i++) {\n                var c = input.charCodeAt(i);\n                if (c < 128) {\n                    output += fromCharCode(c);\n                } else if (c < 2048) {\n                    output += fromCharCode(192 | c >>> 6);\n                    output += fromCharCode(128 | c & 63);\n                } else if (c < 65536) {\n                    output += fromCharCode(224 | c >>> 12);\n                    output += fromCharCode(128 | c >>> 6 & 63);\n                    output += fromCharCode(128 | c & 63);\n                }\n            }\n            return output;\n        }\n        deepExtend(kendo.util, {\n            encodeBase64: encodeBase64,\n            encodeUTF8: encodeUTF8\n        });\n    }());\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('mixins/observers', ['kendo.core'], f);\n}(function () {\n    (function ($) {\n        var math = Math, kendo = window.kendo, deepExtend = kendo.deepExtend, inArray = $.inArray;\n        var ObserversMixin = {\n            observers: function () {\n                this._observers = this._observers || [];\n                return this._observers;\n            },\n            addObserver: function (element) {\n                if (!this._observers) {\n                    this._observers = [element];\n                } else {\n                    this._observers.push(element);\n                }\n                return this;\n            },\n            removeObserver: function (element) {\n                var observers = this.observers();\n                var index = inArray(element, observers);\n                if (index != -1) {\n                    observers.splice(index, 1);\n                }\n                return this;\n            },\n            trigger: function (methodName, event) {\n                var observers = this._observers;\n                var observer;\n                var idx;\n                if (observers && !this._suspended) {\n                    for (idx = 0; idx < observers.length; idx++) {\n                        observer = observers[idx];\n                        if (observer[methodName]) {\n                            observer[methodName](event);\n                        }\n                    }\n                }\n                return this;\n            },\n            optionsChange: function (e) {\n                e = e || {};\n                e.element = this;\n                this.trigger('optionsChange', e);\n            },\n            geometryChange: function () {\n                this.trigger('geometryChange', { element: this });\n            },\n            suspend: function () {\n                this._suspended = (this._suspended || 0) + 1;\n                return this;\n            },\n            resume: function () {\n                this._suspended = math.max((this._suspended || 0) - 1, 0);\n                return this;\n            },\n            _observerField: function (field, value) {\n                if (this[field]) {\n                    this[field].removeObserver(this);\n                }\n                this[field] = value;\n                value.addObserver(this);\n            }\n        };\n        deepExtend(kendo, { mixins: { ObserversMixin: ObserversMixin } });\n    }(window.kendo.jQuery));\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));\n(function (f, define) {\n    define('kendo.dataviz.qrcode', [\n        'kendo.dataviz.core',\n        'kendo.drawing'\n    ], f);\n}(function () {\n    var __meta__ = {\n        id: 'dataviz.qrcode',\n        name: 'QRCode',\n        category: 'dataviz',\n        description: 'QRCode widget.',\n        depends: [\n            'dataviz.core',\n            'drawing'\n        ]\n    };\n    (function ($, undefined) {\n        var kendo = window.kendo, extend = $.extend, draw = kendo.drawing, dataviz = kendo.dataviz, Widget = kendo.ui.Widget, Box2D = dataviz.Box2D, terminator = '0000', NUMERIC = 'numeric', ALPHA_NUMERIC = 'alphanumeric', BYTE = 'byte', powersOfTwo = { '1': 0 }, powersOfTwoResult = { '0': 1 }, generatorPolynomials = [\n                [\n                    1,\n                    0\n                ],\n                [\n                    1,\n                    25,\n                    0\n                ]\n            ], irregularAlignmentPatternsStartDistance = {\n                15: 20,\n                16: 20,\n                18: 24,\n                19: 24,\n                22: 20,\n                24: 22,\n                26: 24,\n                28: 20,\n                30: 20,\n                31: 24,\n                32: 28,\n                33: 24,\n                36: 18,\n                37: 22,\n                39: 20,\n                40: 24\n            }, versionsCodewordsInformation = [\n                {\n                    L: {\n                        groups: [[\n                                1,\n                                19\n                            ]],\n                        totalDataCodewords: 19,\n                        errorCodewordsPerBlock: 7\n                    },\n                    M: {\n                        groups: [[\n                                1,\n                                16\n                            ]],\n                        totalDataCodewords: 16,\n                        errorCodewordsPerBlock: 10\n                    },\n                    Q: {\n                        groups: [[\n                                1,\n                                13\n                            ]],\n                        totalDataCodewords: 13,\n                        errorCodewordsPerBlock: 13\n                    },\n                    H: {\n                        groups: [[\n                                1,\n                                9\n                            ]],\n                        totalDataCodewords: 9,\n                        errorCodewordsPerBlock: 17\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                1,\n                                34\n                            ]],\n                        totalDataCodewords: 34,\n                        errorCodewordsPerBlock: 10\n                    },\n                    M: {\n                        groups: [[\n                                1,\n                                28\n                            ]],\n                        totalDataCodewords: 28,\n                        errorCodewordsPerBlock: 16\n                    },\n                    Q: {\n                        groups: [[\n                                1,\n                                22\n                            ]],\n                        totalDataCodewords: 22,\n                        errorCodewordsPerBlock: 22\n                    },\n                    H: {\n                        groups: [[\n                                1,\n                                16\n                            ]],\n                        totalDataCodewords: 16,\n                        errorCodewordsPerBlock: 28\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                1,\n                                55\n                            ]],\n                        totalDataCodewords: 55,\n                        errorCodewordsPerBlock: 15\n                    },\n                    M: {\n                        groups: [[\n                                1,\n                                44\n                            ]],\n                        totalDataCodewords: 44,\n                        errorCodewordsPerBlock: 26\n                    },\n                    Q: {\n                        groups: [[\n                                2,\n                                17\n                            ]],\n                        totalDataCodewords: 34,\n                        errorCodewordsPerBlock: 18\n                    },\n                    H: {\n                        groups: [[\n                                2,\n                                13\n                            ]],\n                        totalDataCodewords: 26,\n                        errorCodewordsPerBlock: 22\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                1,\n                                80\n                            ]],\n                        totalDataCodewords: 80,\n                        errorCodewordsPerBlock: 20\n                    },\n                    M: {\n                        groups: [[\n                                2,\n                                32\n                            ]],\n                        totalDataCodewords: 64,\n                        errorCodewordsPerBlock: 18\n                    },\n                    Q: {\n                        groups: [[\n                                2,\n                                24\n                            ]],\n                        totalDataCodewords: 48,\n                        errorCodewordsPerBlock: 26\n                    },\n                    H: {\n                        groups: [[\n                                4,\n                                9\n                            ]],\n                        totalDataCodewords: 36,\n                        errorCodewordsPerBlock: 16\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                1,\n                                108\n                            ]],\n                        totalDataCodewords: 108,\n                        errorCodewordsPerBlock: 26\n                    },\n                    M: {\n                        groups: [[\n                                2,\n                                43\n                            ]],\n                        totalDataCodewords: 86,\n                        errorCodewordsPerBlock: 24\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                2,\n                                15\n                            ],\n                            [\n                                2,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 62,\n                        errorCodewordsPerBlock: 18\n                    },\n                    H: {\n                        groups: [\n                            [\n                                2,\n                                11\n                            ],\n                            [\n                                2,\n                                12\n                            ]\n                        ],\n                        totalDataCodewords: 46,\n                        errorCodewordsPerBlock: 22\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                2,\n                                68\n                            ]],\n                        totalDataCodewords: 136,\n                        errorCodewordsPerBlock: 18\n                    },\n                    M: {\n                        groups: [[\n                                4,\n                                27\n                            ]],\n                        totalDataCodewords: 108,\n                        errorCodewordsPerBlock: 16\n                    },\n                    Q: {\n                        groups: [[\n                                4,\n                                19\n                            ]],\n                        totalDataCodewords: 76,\n                        errorCodewordsPerBlock: 24\n                    },\n                    H: {\n                        groups: [[\n                                4,\n                                15\n                            ]],\n                        totalDataCodewords: 60,\n                        errorCodewordsPerBlock: 28\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                2,\n                                78\n                            ]],\n                        totalDataCodewords: 156,\n                        errorCodewordsPerBlock: 20\n                    },\n                    M: {\n                        groups: [[\n                                4,\n                                31\n                            ]],\n                        totalDataCodewords: 124,\n                        errorCodewordsPerBlock: 18\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                2,\n                                14\n                            ],\n                            [\n                                4,\n                                15\n                            ]\n                        ],\n                        totalDataCodewords: 88,\n                        errorCodewordsPerBlock: 18\n                    },\n                    H: {\n                        groups: [\n                            [\n                                4,\n                                13\n                            ],\n                            [\n                                1,\n                                14\n                            ]\n                        ],\n                        totalDataCodewords: 66,\n                        errorCodewordsPerBlock: 26\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                2,\n                                97\n                            ]],\n                        totalDataCodewords: 194,\n                        errorCodewordsPerBlock: 24\n                    },\n                    M: {\n                        groups: [\n                            [\n                                2,\n                                38\n                            ],\n                            [\n                                2,\n                                39\n                            ]\n                        ],\n                        totalDataCodewords: 154,\n                        errorCodewordsPerBlock: 22\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                4,\n                                18\n                            ],\n                            [\n                                2,\n                                19\n                            ]\n                        ],\n                        totalDataCodewords: 110,\n                        errorCodewordsPerBlock: 22\n                    },\n                    H: {\n                        groups: [\n                            [\n                                4,\n                                14\n                            ],\n                            [\n                                2,\n                                15\n                            ]\n                        ],\n                        totalDataCodewords: 86,\n                        errorCodewordsPerBlock: 26\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                2,\n                                116\n                            ]],\n                        totalDataCodewords: 232,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                3,\n                                36\n                            ],\n                            [\n                                2,\n                                37\n                            ]\n                        ],\n                        totalDataCodewords: 182,\n                        errorCodewordsPerBlock: 22\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                4,\n                                16\n                            ],\n                            [\n                                4,\n                                17\n                            ]\n                        ],\n                        totalDataCodewords: 132,\n                        errorCodewordsPerBlock: 20\n                    },\n                    H: {\n                        groups: [\n                            [\n                                4,\n                                12\n                            ],\n                            [\n                                4,\n                                13\n                            ]\n                        ],\n                        totalDataCodewords: 100,\n                        errorCodewordsPerBlock: 24\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                2,\n                                68\n                            ],\n                            [\n                                2,\n                                69\n                            ]\n                        ],\n                        totalDataCodewords: 274,\n                        errorCodewordsPerBlock: 18\n                    },\n                    M: {\n                        groups: [\n                            [\n                                4,\n                                43\n                            ],\n                            [\n                                1,\n                                44\n                            ]\n                        ],\n                        totalDataCodewords: 216,\n                        errorCodewordsPerBlock: 26\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                6,\n                                19\n                            ],\n                            [\n                                2,\n                                20\n                            ]\n                        ],\n                        totalDataCodewords: 154,\n                        errorCodewordsPerBlock: 24\n                    },\n                    H: {\n                        groups: [\n                            [\n                                6,\n                                15\n                            ],\n                            [\n                                2,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 122,\n                        errorCodewordsPerBlock: 28\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                4,\n                                81\n                            ]],\n                        totalDataCodewords: 324,\n                        errorCodewordsPerBlock: 20\n                    },\n                    M: {\n                        groups: [\n                            [\n                                1,\n                                50\n                            ],\n                            [\n                                4,\n                                51\n                            ]\n                        ],\n                        totalDataCodewords: 254,\n                        errorCodewordsPerBlock: 30\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                4,\n                                22\n                            ],\n                            [\n                                4,\n                                23\n                            ]\n                        ],\n                        totalDataCodewords: 180,\n                        errorCodewordsPerBlock: 28\n                    },\n                    H: {\n                        groups: [\n                            [\n                                3,\n                                12\n                            ],\n                            [\n                                8,\n                                13\n                            ]\n                        ],\n                        totalDataCodewords: 140,\n                        errorCodewordsPerBlock: 24\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                2,\n                                92\n                            ],\n                            [\n                                2,\n                                93\n                            ]\n                        ],\n                        totalDataCodewords: 370,\n                        errorCodewordsPerBlock: 24\n                    },\n                    M: {\n                        groups: [\n                            [\n                                6,\n                                36\n                            ],\n                            [\n                                2,\n                                37\n                            ]\n                        ],\n                        totalDataCodewords: 290,\n                        errorCodewordsPerBlock: 22\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                4,\n                                20\n                            ],\n                            [\n                                6,\n                                21\n                            ]\n                        ],\n                        totalDataCodewords: 206,\n                        errorCodewordsPerBlock: 26\n                    },\n                    H: {\n                        groups: [\n                            [\n                                7,\n                                14\n                            ],\n                            [\n                                4,\n                                15\n                            ]\n                        ],\n                        totalDataCodewords: 158,\n                        errorCodewordsPerBlock: 28\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                4,\n                                107\n                            ]],\n                        totalDataCodewords: 428,\n                        errorCodewordsPerBlock: 26\n                    },\n                    M: {\n                        groups: [\n                            [\n                                8,\n                                37\n                            ],\n                            [\n                                1,\n                                38\n                            ]\n                        ],\n                        totalDataCodewords: 334,\n                        errorCodewordsPerBlock: 22\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                8,\n                                20\n                            ],\n                            [\n                                4,\n                                21\n                            ]\n                        ],\n                        totalDataCodewords: 244,\n                        errorCodewordsPerBlock: 24\n                    },\n                    H: {\n                        groups: [\n                            [\n                                12,\n                                11\n                            ],\n                            [\n                                4,\n                                12\n                            ]\n                        ],\n                        totalDataCodewords: 180,\n                        errorCodewordsPerBlock: 22\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                3,\n                                115\n                            ],\n                            [\n                                1,\n                                116\n                            ]\n                        ],\n                        totalDataCodewords: 461,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                4,\n                                40\n                            ],\n                            [\n                                5,\n                                41\n                            ]\n                        ],\n                        totalDataCodewords: 365,\n                        errorCodewordsPerBlock: 24\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                11,\n                                16\n                            ],\n                            [\n                                5,\n                                17\n                            ]\n                        ],\n                        totalDataCodewords: 261,\n                        errorCodewordsPerBlock: 20\n                    },\n                    H: {\n                        groups: [\n                            [\n                                11,\n                                12\n                            ],\n                            [\n                                5,\n                                13\n                            ]\n                        ],\n                        totalDataCodewords: 197,\n                        errorCodewordsPerBlock: 24\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                5,\n                                87\n                            ],\n                            [\n                                1,\n                                88\n                            ]\n                        ],\n                        totalDataCodewords: 523,\n                        errorCodewordsPerBlock: 22\n                    },\n                    M: {\n                        groups: [\n                            [\n                                5,\n                                41\n                            ],\n                            [\n                                5,\n                                42\n                            ]\n                        ],\n                        totalDataCodewords: 415,\n                        errorCodewordsPerBlock: 24\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                5,\n                                24\n                            ],\n                            [\n                                7,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 295,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                11,\n                                12\n                            ],\n                            [\n                                7,\n                                13\n                            ]\n                        ],\n                        totalDataCodewords: 223,\n                        errorCodewordsPerBlock: 24\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                5,\n                                98\n                            ],\n                            [\n                                1,\n                                99\n                            ]\n                        ],\n                        totalDataCodewords: 589,\n                        errorCodewordsPerBlock: 24\n                    },\n                    M: {\n                        groups: [\n                            [\n                                7,\n                                45\n                            ],\n                            [\n                                3,\n                                46\n                            ]\n                        ],\n                        totalDataCodewords: 453,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                15,\n                                19\n                            ],\n                            [\n                                2,\n                                20\n                            ]\n                        ],\n                        totalDataCodewords: 325,\n                        errorCodewordsPerBlock: 24\n                    },\n                    H: {\n                        groups: [\n                            [\n                                3,\n                                15\n                            ],\n                            [\n                                13,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 253,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                1,\n                                107\n                            ],\n                            [\n                                5,\n                                108\n                            ]\n                        ],\n                        totalDataCodewords: 647,\n                        errorCodewordsPerBlock: 28\n                    },\n                    M: {\n                        groups: [\n                            [\n                                10,\n                                46\n                            ],\n                            [\n                                1,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 507,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                1,\n                                22\n                            ],\n                            [\n                                15,\n                                23\n                            ]\n                        ],\n                        totalDataCodewords: 367,\n                        errorCodewordsPerBlock: 28\n                    },\n                    H: {\n                        groups: [\n                            [\n                                2,\n                                14\n                            ],\n                            [\n                                17,\n                                15\n                            ]\n                        ],\n                        totalDataCodewords: 283,\n                        errorCodewordsPerBlock: 28\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                5,\n                                120\n                            ],\n                            [\n                                1,\n                                121\n                            ]\n                        ],\n                        totalDataCodewords: 721,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                9,\n                                43\n                            ],\n                            [\n                                4,\n                                44\n                            ]\n                        ],\n                        totalDataCodewords: 563,\n                        errorCodewordsPerBlock: 26\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                17,\n                                22\n                            ],\n                            [\n                                1,\n                                23\n                            ]\n                        ],\n                        totalDataCodewords: 397,\n                        errorCodewordsPerBlock: 28\n                    },\n                    H: {\n                        groups: [\n                            [\n                                2,\n                                14\n                            ],\n                            [\n                                19,\n                                15\n                            ]\n                        ],\n                        totalDataCodewords: 313,\n                        errorCodewordsPerBlock: 28\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                3,\n                                113\n                            ],\n                            [\n                                4,\n                                114\n                            ]\n                        ],\n                        totalDataCodewords: 795,\n                        errorCodewordsPerBlock: 28\n                    },\n                    M: {\n                        groups: [\n                            [\n                                3,\n                                44\n                            ],\n                            [\n                                11,\n                                45\n                            ]\n                        ],\n                        totalDataCodewords: 627,\n                        errorCodewordsPerBlock: 26\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                17,\n                                21\n                            ],\n                            [\n                                4,\n                                22\n                            ]\n                        ],\n                        totalDataCodewords: 445,\n                        errorCodewordsPerBlock: 26\n                    },\n                    H: {\n                        groups: [\n                            [\n                                9,\n                                13\n                            ],\n                            [\n                                16,\n                                14\n                            ]\n                        ],\n                        totalDataCodewords: 341,\n                        errorCodewordsPerBlock: 26\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                3,\n                                107\n                            ],\n                            [\n                                5,\n                                108\n                            ]\n                        ],\n                        totalDataCodewords: 861,\n                        errorCodewordsPerBlock: 28\n                    },\n                    M: {\n                        groups: [\n                            [\n                                3,\n                                41\n                            ],\n                            [\n                                13,\n                                42\n                            ]\n                        ],\n                        totalDataCodewords: 669,\n                        errorCodewordsPerBlock: 26\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                15,\n                                24\n                            ],\n                            [\n                                5,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 485,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                15,\n                                15\n                            ],\n                            [\n                                10,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 385,\n                        errorCodewordsPerBlock: 28\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                4,\n                                116\n                            ],\n                            [\n                                4,\n                                117\n                            ]\n                        ],\n                        totalDataCodewords: 932,\n                        errorCodewordsPerBlock: 28\n                    },\n                    M: {\n                        groups: [[\n                                17,\n                                42\n                            ]],\n                        totalDataCodewords: 714,\n                        errorCodewordsPerBlock: 26\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                17,\n                                22\n                            ],\n                            [\n                                6,\n                                23\n                            ]\n                        ],\n                        totalDataCodewords: 512,\n                        errorCodewordsPerBlock: 28\n                    },\n                    H: {\n                        groups: [\n                            [\n                                19,\n                                16\n                            ],\n                            [\n                                6,\n                                17\n                            ]\n                        ],\n                        totalDataCodewords: 406,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                2,\n                                111\n                            ],\n                            [\n                                7,\n                                112\n                            ]\n                        ],\n                        totalDataCodewords: 1006,\n                        errorCodewordsPerBlock: 28\n                    },\n                    M: {\n                        groups: [[\n                                17,\n                                46\n                            ]],\n                        totalDataCodewords: 782,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                7,\n                                24\n                            ],\n                            [\n                                16,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 568,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [[\n                                34,\n                                13\n                            ]],\n                        totalDataCodewords: 442,\n                        errorCodewordsPerBlock: 24\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                4,\n                                121\n                            ],\n                            [\n                                5,\n                                122\n                            ]\n                        ],\n                        totalDataCodewords: 1094,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                4,\n                                47\n                            ],\n                            [\n                                14,\n                                48\n                            ]\n                        ],\n                        totalDataCodewords: 860,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                11,\n                                24\n                            ],\n                            [\n                                14,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 614,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                16,\n                                15\n                            ],\n                            [\n                                14,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 464,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                6,\n                                117\n                            ],\n                            [\n                                4,\n                                118\n                            ]\n                        ],\n                        totalDataCodewords: 1174,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                6,\n                                45\n                            ],\n                            [\n                                14,\n                                46\n                            ]\n                        ],\n                        totalDataCodewords: 914,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                11,\n                                24\n                            ],\n                            [\n                                16,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 664,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                30,\n                                16\n                            ],\n                            [\n                                2,\n                                17\n                            ]\n                        ],\n                        totalDataCodewords: 514,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                8,\n                                106\n                            ],\n                            [\n                                4,\n                                107\n                            ]\n                        ],\n                        totalDataCodewords: 1276,\n                        errorCodewordsPerBlock: 26\n                    },\n                    M: {\n                        groups: [\n                            [\n                                8,\n                                47\n                            ],\n                            [\n                                13,\n                                48\n                            ]\n                        ],\n                        totalDataCodewords: 1000,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                7,\n                                24\n                            ],\n                            [\n                                22,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 718,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                22,\n                                15\n                            ],\n                            [\n                                13,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 538,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                10,\n                                114\n                            ],\n                            [\n                                2,\n                                115\n                            ]\n                        ],\n                        totalDataCodewords: 1370,\n                        errorCodewordsPerBlock: 28\n                    },\n                    M: {\n                        groups: [\n                            [\n                                19,\n                                46\n                            ],\n                            [\n                                4,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 1062,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                28,\n                                22\n                            ],\n                            [\n                                6,\n                                23\n                            ]\n                        ],\n                        totalDataCodewords: 754,\n                        errorCodewordsPerBlock: 28\n                    },\n                    H: {\n                        groups: [\n                            [\n                                33,\n                                16\n                            ],\n                            [\n                                4,\n                                17\n                            ]\n                        ],\n                        totalDataCodewords: 596,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                8,\n                                122\n                            ],\n                            [\n                                4,\n                                123\n                            ]\n                        ],\n                        totalDataCodewords: 1468,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                22,\n                                45\n                            ],\n                            [\n                                3,\n                                46\n                            ]\n                        ],\n                        totalDataCodewords: 1128,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                8,\n                                23\n                            ],\n                            [\n                                26,\n                                24\n                            ]\n                        ],\n                        totalDataCodewords: 808,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                12,\n                                15\n                            ],\n                            [\n                                28,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 628,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                3,\n                                117\n                            ],\n                            [\n                                10,\n                                118\n                            ]\n                        ],\n                        totalDataCodewords: 1531,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                3,\n                                45\n                            ],\n                            [\n                                23,\n                                46\n                            ]\n                        ],\n                        totalDataCodewords: 1193,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                4,\n                                24\n                            ],\n                            [\n                                31,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 871,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                11,\n                                15\n                            ],\n                            [\n                                31,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 661,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                7,\n                                116\n                            ],\n                            [\n                                7,\n                                117\n                            ]\n                        ],\n                        totalDataCodewords: 1631,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                21,\n                                45\n                            ],\n                            [\n                                7,\n                                46\n                            ]\n                        ],\n                        totalDataCodewords: 1267,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                1,\n                                23\n                            ],\n                            [\n                                37,\n                                24\n                            ]\n                        ],\n                        totalDataCodewords: 911,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                19,\n                                15\n                            ],\n                            [\n                                26,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 701,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                5,\n                                115\n                            ],\n                            [\n                                10,\n                                116\n                            ]\n                        ],\n                        totalDataCodewords: 1735,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                19,\n                                47\n                            ],\n                            [\n                                10,\n                                48\n                            ]\n                        ],\n                        totalDataCodewords: 1373,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                15,\n                                24\n                            ],\n                            [\n                                25,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 985,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                23,\n                                15\n                            ],\n                            [\n                                25,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 745,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                13,\n                                115\n                            ],\n                            [\n                                3,\n                                116\n                            ]\n                        ],\n                        totalDataCodewords: 1843,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                2,\n                                46\n                            ],\n                            [\n                                29,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 1455,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                42,\n                                24\n                            ],\n                            [\n                                1,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1033,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                23,\n                                15\n                            ],\n                            [\n                                28,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 793,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [[\n                                17,\n                                115\n                            ]],\n                        totalDataCodewords: 1955,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                10,\n                                46\n                            ],\n                            [\n                                23,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 1541,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                10,\n                                24\n                            ],\n                            [\n                                35,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1115,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                19,\n                                15\n                            ],\n                            [\n                                35,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 845,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                17,\n                                115\n                            ],\n                            [\n                                1,\n                                116\n                            ]\n                        ],\n                        totalDataCodewords: 2071,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                14,\n                                46\n                            ],\n                            [\n                                21,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 1631,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                29,\n                                24\n                            ],\n                            [\n                                19,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1171,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                11,\n                                15\n                            ],\n                            [\n                                46,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 901,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                13,\n                                115\n                            ],\n                            [\n                                6,\n                                116\n                            ]\n                        ],\n                        totalDataCodewords: 2191,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                14,\n                                46\n                            ],\n                            [\n                                23,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 1725,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                44,\n                                24\n                            ],\n                            [\n                                7,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1231,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                59,\n                                16\n                            ],\n                            [\n                                1,\n                                17\n                            ]\n                        ],\n                        totalDataCodewords: 961,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                12,\n                                121\n                            ],\n                            [\n                                7,\n                                122\n                            ]\n                        ],\n                        totalDataCodewords: 2306,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                12,\n                                47\n                            ],\n                            [\n                                26,\n                                48\n                            ]\n                        ],\n                        totalDataCodewords: 1812,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                39,\n                                24\n                            ],\n                            [\n                                14,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1286,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                22,\n                                15\n                            ],\n                            [\n                                41,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 986,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                6,\n                                121\n                            ],\n                            [\n                                14,\n                                122\n                            ]\n                        ],\n                        totalDataCodewords: 2434,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                6,\n                                47\n                            ],\n                            [\n                                34,\n                                48\n                            ]\n                        ],\n                        totalDataCodewords: 1914,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                46,\n                                24\n                            ],\n                            [\n                                10,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1354,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                2,\n                                15\n                            ],\n                            [\n                                64,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 1054,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                17,\n                                122\n                            ],\n                            [\n                                4,\n                                123\n                            ]\n                        ],\n                        totalDataCodewords: 2566,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                29,\n                                46\n                            ],\n                            [\n                                14,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 1992,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                49,\n                                24\n                            ],\n                            [\n                                10,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1426,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                24,\n                                15\n                            ],\n                            [\n                                46,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 1096,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                4,\n                                122\n                            ],\n                            [\n                                18,\n                                123\n                            ]\n                        ],\n                        totalDataCodewords: 2702,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                13,\n                                46\n                            ],\n                            [\n                                32,\n                                47\n                            ]\n                        ],\n                        totalDataCodewords: 2102,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                48,\n                                24\n                            ],\n                            [\n                                14,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1502,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                42,\n                                15\n                            ],\n                            [\n                                32,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 1142,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                20,\n                                117\n                            ],\n                            [\n                                4,\n                                118\n                            ]\n                        ],\n                        totalDataCodewords: 2812,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                40,\n                                47\n                            ],\n                            [\n                                7,\n                                48\n                            ]\n                        ],\n                        totalDataCodewords: 2216,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                43,\n                                24\n                            ],\n                            [\n                                22,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1582,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                10,\n                                15\n                            ],\n                            [\n                                67,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 1222,\n                        errorCodewordsPerBlock: 30\n                    }\n                },\n                {\n                    L: {\n                        groups: [\n                            [\n                                19,\n                                118\n                            ],\n                            [\n                                6,\n                                119\n                            ]\n                        ],\n                        totalDataCodewords: 2956,\n                        errorCodewordsPerBlock: 30\n                    },\n                    M: {\n                        groups: [\n                            [\n                                18,\n                                47\n                            ],\n                            [\n                                31,\n                                48\n                            ]\n                        ],\n                        totalDataCodewords: 2334,\n                        errorCodewordsPerBlock: 28\n                    },\n                    Q: {\n                        groups: [\n                            [\n                                34,\n                                24\n                            ],\n                            [\n                                34,\n                                25\n                            ]\n                        ],\n                        totalDataCodewords: 1666,\n                        errorCodewordsPerBlock: 30\n                    },\n                    H: {\n                        groups: [\n                            [\n                                20,\n                                15\n                            ],\n                            [\n                                61,\n                                16\n                            ]\n                        ],\n                        totalDataCodewords: 1276,\n                        errorCodewordsPerBlock: 30\n                    }\n                }\n            ], finderPattern = [\n                1,\n                0,\n                1,\n                1,\n                1\n            ], alignmentPattern = [\n                1,\n                0,\n                1\n            ], errorCorrectionPatterns = {\n                L: '01',\n                M: '00',\n                Q: '11',\n                H: '10'\n            }, formatMaskPattern = '101010000010010', formatGeneratorPolynomial = '10100110111', versionGeneratorPolynomial = '1111100100101', paddingCodewords = [\n                '11101100',\n                '00010001'\n            ], finderPatternValue = 93, maskPatternConditions = [\n                function (row, column) {\n                    return (row + column) % 2 === 0;\n                },\n                function (row) {\n                    return row % 2 === 0;\n                },\n                function (row, column) {\n                    return column % 3 === 0;\n                },\n                function (row, column) {\n                    return (row + column) % 3 === 0;\n                },\n                function (row, column) {\n                    return (Math.floor(row / 2) + Math.floor(column / 3)) % 2 === 0;\n                },\n                function (row, column) {\n                    return row * column % 2 + row * column % 3 === 0;\n                },\n                function (row, column) {\n                    return (row * column % 2 + row * column % 3) % 2 === 0;\n                },\n                function (row, column) {\n                    return ((row + column) % 2 + row * column % 3) % 2 === 0;\n                }\n            ], numberRegex = /^\\d+/, alphaPattern = 'A-Z0-9 $%*+./:-', alphaExclusiveSet = 'A-Z $%*+./:-', alphaRegex = new RegExp('^[' + alphaExclusiveSet + ']+'), alphaNumericRegex = new RegExp('^[' + alphaPattern + ']+'), byteRegex = new RegExp('^[^' + alphaPattern + ']+'), initMinNumericBeforeAlpha = 8, initMinNumericBeforeByte = 5, initMinAlphaBeforeByte = 8, minNumericBeforeAlpha = 17, minNumericBeforeByte = 9, minAlphaBeforeByte = 16, round = Math.round;\n        function toDecimal(value) {\n            return parseInt(value, 2);\n        }\n        function toBitsString(value, length) {\n            var result = Number(value).toString(2);\n            if (result.length < length) {\n                result = new Array(length - result.length + 1).join(0) + result;\n            }\n            return result;\n        }\n        function splitInto(str, n) {\n            var result = [], idx = 0;\n            while (idx < str.length) {\n                result.push(str.substring(idx, idx + n));\n                idx += n;\n            }\n            return result;\n        }\n        var QRDataMode = kendo.Class.extend({\n            getVersionIndex: function (version) {\n                if (version < 10) {\n                    return 0;\n                } else if (version > 26) {\n                    return 2;\n                }\n                return 1;\n            },\n            getBitsCharacterCount: function (version) {\n                var mode = this;\n                return mode.bitsInCharacterCount[mode.getVersionIndex(version || 40)];\n            },\n            getModeCountString: function (length, version) {\n                var mode = this;\n                return mode.modeIndicator + toBitsString(length, mode.getBitsCharacterCount(version));\n            },\n            encode: function () {\n            },\n            getStringBitsLength: function () {\n            },\n            getValue: function () {\n            },\n            modeIndicator: '',\n            bitsInCharacterCount: []\n        });\n        var modes = {};\n        modes[NUMERIC] = QRDataMode.extend({\n            bitsInCharacterCount: [\n                10,\n                12,\n                14\n            ],\n            modeIndicator: '0001',\n            getValue: function (character) {\n                return parseInt(character, 10);\n            },\n            encode: function (str, version) {\n                var mode = this, parts = splitInto(str, 3), result = mode.getModeCountString(str.length, version);\n                for (var i = 0; i < parts.length - 1; i++) {\n                    result += toBitsString(parts[i], 10);\n                }\n                return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n            },\n            getStringBitsLength: function (inputLength, version) {\n                var mod3 = inputLength % 3;\n                return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n            }\n        });\n        modes[ALPHA_NUMERIC] = QRDataMode.extend({\n            characters: {\n                '0': 0,\n                '1': 1,\n                '2': 2,\n                '3': 3,\n                '4': 4,\n                '5': 5,\n                '6': 6,\n                '7': 7,\n                '8': 8,\n                '9': 9,\n                'A': 10,\n                'B': 11,\n                'C': 12,\n                'D': 13,\n                'E': 14,\n                'F': 15,\n                'G': 16,\n                'H': 17,\n                'I': 18,\n                'J': 19,\n                'K': 20,\n                'L': 21,\n                'M': 22,\n                'N': 23,\n                'O': 24,\n                'P': 25,\n                'Q': 26,\n                'R': 27,\n                'S': 28,\n                'T': 29,\n                'U': 30,\n                'V': 31,\n                'W': 32,\n                'X': 33,\n                'Y': 34,\n                'Z': 35,\n                ' ': 36,\n                '$': 37,\n                '%': 38,\n                '*': 39,\n                '+': 40,\n                '-': 41,\n                '.': 42,\n                '/': 43,\n                ':': 44\n            },\n            bitsInCharacterCount: [\n                9,\n                11,\n                13\n            ],\n            modeIndicator: '0010',\n            getValue: function (character) {\n                return this.characters[character];\n            },\n            encode: function (str, version) {\n                var mode = this, parts = splitInto(str, 2), result = mode.getModeCountString(str.length, version), value;\n                for (var i = 0; i < parts.length - 1; i++) {\n                    value = 45 * mode.getValue(parts[i].charAt(0)) + mode.getValue(parts[i].charAt(1));\n                    result += toBitsString(value, 11);\n                }\n                value = parts[i].length == 2 ? 45 * mode.getValue(parts[i].charAt(0)) + mode.getValue(parts[i].charAt(1)) : mode.getValue(parts[i].charAt(0));\n                return result + toBitsString(value, 1 + 5 * parts[i].length);\n            },\n            getStringBitsLength: function (inputLength, version) {\n                return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n            }\n        });\n        modes[BYTE] = QRDataMode.extend({\n            bitsInCharacterCount: [\n                8,\n                16,\n                16\n            ],\n            modeIndicator: '0100',\n            getValue: function (character) {\n                var code = character.charCodeAt(0);\n                if (code <= 127 || 160 <= code && code <= 255) {\n                    return code;\n                } else {\n                    throw new Error('Unsupported character: ' + character);\n                }\n            },\n            encode: function (str, version) {\n                var mode = this, result = mode.getModeCountString(str.length, version);\n                for (var i = 0; i < str.length; i++) {\n                    result += toBitsString(mode.getValue(str.charAt(i)), 8);\n                }\n                return result;\n            },\n            getStringBitsLength: function (inputLength, version) {\n                return 4 + this.getBitsCharacterCount(version) + 8 * inputLength;\n            }\n        });\n        var modeInstances = {};\n        for (var mode in modes) {\n            modeInstances[mode] = new modes[mode]();\n        }\n        var FreeCellVisitor = function (matrix) {\n            var that = this, row = matrix.length - 1, column = matrix.length - 1, startColumn = column, dir = -1, c = 0;\n            that.move = function () {\n                row += dir * c;\n                c ^= 1;\n                column = startColumn - c;\n            };\n            that.getNextCell = function () {\n                while (matrix[row][column] !== undefined) {\n                    that.move();\n                    if (row < 0 || row >= matrix.length) {\n                        dir = -dir;\n                        startColumn -= startColumn != 8 ? 2 : 3;\n                        column = startColumn;\n                        row = dir < 0 ? matrix.length - 1 : 0;\n                    }\n                }\n                return {\n                    row: row,\n                    column: column\n                };\n            };\n            that.getNextRemainderCell = function () {\n                that.move();\n                if (matrix[row][column] === undefined) {\n                    return {\n                        row: row,\n                        column: column\n                    };\n                }\n            };\n        };\n        function fillFunctionCell(matrices, bit, x, y) {\n            for (var i = 0; i < matrices.length; i++) {\n                matrices[i][x][y] = bit;\n            }\n        }\n        function fillDataCell(matrices, bit, x, y) {\n            for (var i = 0; i < maskPatternConditions.length; i++) {\n                matrices[i][x][y] = maskPatternConditions[i](x, y) ? bit ^ 1 : parseInt(bit, 10);\n            }\n        }\n        var fillData = function (matrices, blocks) {\n            var cellVisitor = new FreeCellVisitor(matrices[0]), block, codewordIdx, cell;\n            for (var blockIdx = 0; blockIdx < blocks.length; blockIdx++) {\n                block = blocks[blockIdx];\n                codewordIdx = 0;\n                while (block.length > 0) {\n                    for (var i = 0; i < block.length; i++) {\n                        for (var j = 0; j < 8; j++) {\n                            cell = cellVisitor.getNextCell();\n                            fillDataCell(matrices, block[i][codewordIdx].charAt(j), cell.row, cell.column);\n                        }\n                    }\n                    codewordIdx++;\n                    while (block[0] && codewordIdx == block[0].length) {\n                        block.splice(0, 1);\n                    }\n                }\n            }\n            while (cell = cellVisitor.getNextRemainderCell()) {\n                fillDataCell(matrices, 0, cell.row, cell.column);\n            }\n        };\n        var padDataString = function (dataString, totalDataCodewords) {\n            var dataBitsCount = totalDataCodewords * 8, terminatorIndex = 0, paddingCodewordIndex = 0;\n            while (dataString.length < dataBitsCount && terminatorIndex < terminator.length) {\n                dataString += terminator.charAt(terminatorIndex++);\n            }\n            if (dataString.length % 8 !== 0) {\n                dataString += new Array(9 - dataString.length % 8).join('0');\n            }\n            while (dataString.length < dataBitsCount) {\n                dataString += paddingCodewords[paddingCodewordIndex];\n                paddingCodewordIndex ^= 1;\n            }\n            return dataString;\n        };\n        function generatePowersOfTwo() {\n            var result;\n            for (var power = 1; power < 255; power++) {\n                result = powersOfTwoResult[power - 1] * 2;\n                if (result > 255) {\n                    result = result ^ 285;\n                }\n                powersOfTwoResult[power] = result;\n                powersOfTwo[result] = power;\n            }\n            result = powersOfTwoResult[power - 1] * 2 ^ 285;\n            powersOfTwoResult[power] = result;\n            powersOfTwoResult[-1] = 0;\n        }\n        var xorPolynomials = function (x, y) {\n            var result = [], idx = x.length - 2;\n            for (var i = idx; i >= 0; i--) {\n                result[i] = x[i] ^ y[i];\n            }\n            return result;\n        };\n        var multiplyPolynomials = function (x, y) {\n            var result = [];\n            for (var i = 0; i < x.length; i++) {\n                for (var j = 0; j < y.length; j++) {\n                    if (result[i + j] === undefined) {\n                        result[i + j] = (x[i] + (y[j] >= 0 ? y[j] : 0)) % 255;\n                    } else {\n                        result[i + j] = powersOfTwo[powersOfTwoResult[result[i + j]] ^ powersOfTwoResult[(x[i] + y[j]) % 255]];\n                    }\n                }\n            }\n            return result;\n        };\n        function generateGeneratorPolynomials() {\n            var maxErrorCorrectionCodeWordsCount = 68;\n            for (var idx = 2; idx <= maxErrorCorrectionCodeWordsCount; idx++) {\n                var firstPolynomial = generatorPolynomials[idx - 1], secondPolynomial = [\n                        idx,\n                        0\n                    ];\n                generatorPolynomials[idx] = multiplyPolynomials(firstPolynomial, secondPolynomial);\n            }\n        }\n        generatePowersOfTwo();\n        generateGeneratorPolynomials();\n        function multiplyByConstant(polynomial, power) {\n            var result = [], idx = polynomial.length - 1;\n            do {\n                result[idx] = powersOfTwoResult[(polynomial[idx] + power) % 255];\n                idx--;\n            } while (polynomial[idx] !== undefined);\n            return result;\n        }\n        var generateErrorCodewords = function (data, errorCodewordsCount) {\n            var generator = generatorPolynomials[errorCodewordsCount - 1], result = new Array(errorCodewordsCount).concat(data), generatorPolynomial = new Array(result.length - generator.length).concat(generator), steps = data.length, errorCodewords = [], divisor, idx;\n            for (idx = 0; idx < steps; idx++) {\n                divisor = multiplyByConstant(generatorPolynomial, powersOfTwo[result[result.length - 1]]);\n                generatorPolynomial.splice(0, 1);\n                result = xorPolynomials(divisor, result);\n            }\n            for (idx = result.length - 1; idx >= 0; idx--) {\n                errorCodewords[errorCodewordsCount - 1 - idx] = toBitsString(result[idx], 8);\n            }\n            return errorCodewords;\n        };\n        var getBlocks = function (dataStream, versionCodewordsInformation) {\n            var codewordStart = 0, dataBlocks = [], errorBlocks = [], dataBlock, versionGroups = versionCodewordsInformation.groups, blockCodewordsCount, groupBlocksCount, messagePolynomial, codeword;\n            for (var groupIdx = 0; groupIdx < versionGroups.length; groupIdx++) {\n                groupBlocksCount = versionGroups[groupIdx][0];\n                for (var blockIdx = 0; blockIdx < groupBlocksCount; blockIdx++) {\n                    blockCodewordsCount = versionGroups[groupIdx][1];\n                    dataBlock = [];\n                    messagePolynomial = [];\n                    for (var codewordIdx = 1; codewordIdx <= blockCodewordsCount; codewordIdx++) {\n                        codeword = dataStream.substring(codewordStart, codewordStart + 8);\n                        dataBlock.push(codeword);\n                        messagePolynomial[blockCodewordsCount - codewordIdx] = toDecimal(codeword);\n                        codewordStart += 8;\n                    }\n                    dataBlocks.push(dataBlock);\n                    errorBlocks.push(generateErrorCodewords(messagePolynomial, versionCodewordsInformation.errorCodewordsPerBlock));\n                }\n            }\n            return [\n                dataBlocks,\n                errorBlocks\n            ];\n        };\n        var chooseMode = function (str, minNumericBeforeAlpha, minNumericBeforeByte, minAlphaBeforeByte, previousMode) {\n            var numeric = numberRegex.exec(str), numericMatch = numeric ? numeric[0] : '', alpha = alphaRegex.exec(str), alphaMatch = alpha ? alpha[0] : '', alphaNumeric = alphaNumericRegex.exec(str), alphaNumericMatch = alphaNumeric ? alphaNumeric[0] : '', mode, modeString;\n            if (numericMatch && (numericMatch.length >= minNumericBeforeAlpha || str.length == numericMatch.length || numericMatch.length >= minNumericBeforeByte && !alphaNumericRegex.test(str.charAt(numericMatch.length)))) {\n                mode = NUMERIC;\n                modeString = numericMatch;\n            } else if (alphaNumericMatch && (str.length == alphaNumericMatch.length || alphaNumericMatch.length >= minAlphaBeforeByte || previousMode == ALPHA_NUMERIC)) {\n                mode = ALPHA_NUMERIC;\n                modeString = numericMatch || alphaMatch;\n            } else {\n                mode = BYTE;\n                if (alphaNumericMatch) {\n                    modeString = alphaNumericMatch + byteRegex.exec(str.substring(alphaNumericMatch.length))[0];\n                } else {\n                    modeString = byteRegex.exec(str)[0];\n                }\n            }\n            return {\n                mode: mode,\n                modeString: modeString\n            };\n        };\n        var getModes = function (str) {\n            var modes = [], previousMode, idx = 0;\n            modes.push(chooseMode(str, initMinNumericBeforeAlpha, initMinNumericBeforeByte, initMinAlphaBeforeByte, previousMode));\n            previousMode = modes[0].mode;\n            str = str.substr(modes[0].modeString.length);\n            while (str.length > 0) {\n                var nextMode = chooseMode(str, minNumericBeforeAlpha, minNumericBeforeByte, minAlphaBeforeByte, previousMode);\n                if (nextMode.mode != previousMode) {\n                    previousMode = nextMode.mode;\n                    modes.push(nextMode);\n                    idx++;\n                } else {\n                    modes[idx].modeString += nextMode.modeString;\n                }\n                str = str.substr(nextMode.modeString.length);\n            }\n            return modes;\n        };\n        var getDataCodewordsCount = function (modes) {\n            var length = 0, mode;\n            for (var i = 0; i < modes.length; i++) {\n                mode = modeInstances[modes[i].mode];\n                length += mode.getStringBitsLength(modes[i].modeString.length);\n            }\n            return Math.ceil(length / 8);\n        };\n        var getVersion = function (dataCodewordsCount, errorCorrectionLevel) {\n            var x = 0, y = versionsCodewordsInformation.length - 1, version = Math.floor(versionsCodewordsInformation.length / 2);\n            do {\n                if (dataCodewordsCount < versionsCodewordsInformation[version][errorCorrectionLevel].totalDataCodewords) {\n                    y = version;\n                } else {\n                    x = version;\n                }\n                version = x + Math.floor((y - x) / 2);\n            } while (y - x > 1);\n            if (dataCodewordsCount <= versionsCodewordsInformation[x][errorCorrectionLevel].totalDataCodewords) {\n                return version + 1;\n            }\n            return y + 1;\n        };\n        var getDataString = function (modes, version) {\n            var dataString = '', mode;\n            for (var i = 0; i < modes.length; i++) {\n                mode = modeInstances[modes[i].mode];\n                dataString += mode.encode(modes[i].modeString, version);\n            }\n            return dataString;\n        };\n        var encodeFormatInformation = function (format) {\n            var formatNumber = toDecimal(format), encodedString, result = '';\n            if (formatNumber === 0) {\n                return '101010000010010';\n            } else {\n                encodedString = encodeBCH(toDecimal(format), formatGeneratorPolynomial, 15);\n            }\n            for (var i = 0; i < encodedString.length; i++) {\n                result += encodedString.charAt(i) ^ formatMaskPattern.charAt(i);\n            }\n            return result;\n        };\n        var encodeBCH = function (value, generatorPolynomial, codeLength) {\n            var generatorNumber = toDecimal(generatorPolynomial), polynomialLength = generatorPolynomial.length - 1, valueNumber = value << polynomialLength, length = codeLength - polynomialLength, valueString = toBitsString(value, length), result = dividePolynomials(valueNumber, generatorNumber);\n            result = valueString + toBitsString(result, polynomialLength);\n            return result;\n        };\n        var dividePolynomials = function (numberX, numberY) {\n            var yLength = numberY.toString(2).length, xLength = numberX.toString(2).length;\n            do {\n                numberX ^= numberY << xLength - yLength;\n                xLength = numberX.toString(2).length;\n            } while (xLength >= yLength);\n            return numberX;\n        };\n        function getNumberAt(str, idx) {\n            return parseInt(str.charAt(idx), 10);\n        }\n        var initMatrices = function (version) {\n            var matrices = [], modules = 17 + 4 * version;\n            for (var i = 0; i < maskPatternConditions.length; i++) {\n                matrices[i] = new Array(modules);\n                for (var j = 0; j < modules; j++) {\n                    matrices[i][j] = new Array(modules);\n                }\n            }\n            return matrices;\n        };\n        var addFormatInformation = function (matrices, formatString) {\n            var matrix = matrices[0], x, y, idx = 0, length = formatString.length;\n            for (x = 0, y = 8; x <= 8; x++) {\n                if (x !== 6) {\n                    fillFunctionCell(matrices, getNumberAt(formatString, length - 1 - idx++), x, y);\n                }\n            }\n            for (x = 8, y = 7; y >= 0; y--) {\n                if (y !== 6) {\n                    fillFunctionCell(matrices, getNumberAt(formatString, length - 1 - idx++), x, y);\n                }\n            }\n            idx = 0;\n            for (y = matrix.length - 1, x = 8; y >= matrix.length - 8; y--) {\n                fillFunctionCell(matrices, getNumberAt(formatString, length - 1 - idx++), x, y);\n            }\n            fillFunctionCell(matrices, 1, matrix.length - 8, 8);\n            for (x = matrix.length - 7, y = 8; x < matrix.length; x++) {\n                fillFunctionCell(matrices, getNumberAt(formatString, length - 1 - idx++), x, y);\n            }\n        };\n        var encodeVersionInformation = function (version) {\n            return encodeBCH(version, versionGeneratorPolynomial, 18);\n        };\n        var addVersionInformation = function (matrices, dataString) {\n            var matrix = matrices[0], modules = matrix.length, x1 = 0, y1 = modules - 11, x2 = modules - 11, y2 = 0, quotient, mod, value;\n            for (var idx = 0; idx < dataString.length; idx++) {\n                quotient = Math.floor(idx / 3);\n                mod = idx % 3;\n                value = getNumberAt(dataString, dataString.length - idx - 1);\n                fillFunctionCell(matrices, value, x1 + quotient, y1 + mod);\n                fillFunctionCell(matrices, value, x2 + mod, y2 + quotient);\n            }\n        };\n        var addCentricPattern = function (matrices, pattern, x, y) {\n            var size = pattern.length + 2, length = pattern.length + 1, value;\n            for (var i = 0; i < pattern.length; i++) {\n                for (var j = i; j < size - i; j++) {\n                    value = pattern[i];\n                    fillFunctionCell(matrices, value, x + j, y + i);\n                    fillFunctionCell(matrices, value, x + i, y + j);\n                    fillFunctionCell(matrices, value, x + length - j, y + length - i);\n                    fillFunctionCell(matrices, value, x + length - i, y + length - j);\n                }\n            }\n        };\n        var addFinderSeparator = function (matrices, direction, x, y) {\n            var nextX = x, nextY = y, matrix = matrices[0];\n            do {\n                fillFunctionCell(matrices, 0, nextX, y);\n                fillFunctionCell(matrices, 0, x, nextY);\n                nextX += direction[0];\n                nextY += direction[1];\n            } while (nextX >= 0 && nextX < matrix.length);\n        };\n        var addFinderPatterns = function (matrices) {\n            var modules = matrices[0].length;\n            addCentricPattern(matrices, finderPattern, 0, 0);\n            addFinderSeparator(matrices, [\n                -1,\n                -1\n            ], 7, 7);\n            addCentricPattern(matrices, finderPattern, modules - 7, 0);\n            addFinderSeparator(matrices, [\n                1,\n                -1\n            ], modules - 8, 7);\n            addCentricPattern(matrices, finderPattern, 0, modules - 7);\n            addFinderSeparator(matrices, [\n                -1,\n                1\n            ], 7, modules - 8);\n        };\n        var addAlignmentPatterns = function (matrices, version) {\n            if (version < 2) {\n                return;\n            }\n            var matrix = matrices[0], modules = matrix.length, pointsCount = Math.floor(version / 7), points = [6], startDistance, distance, idx = 0;\n            if (startDistance = irregularAlignmentPatternsStartDistance[version]) {\n                distance = (modules - 13 - startDistance) / pointsCount;\n            } else {\n                startDistance = distance = (modules - 13) / (pointsCount + 1);\n            }\n            points.push(points[idx++] + startDistance);\n            while (points[idx] + distance < modules) {\n                points.push(points[idx++] + distance);\n            }\n            for (var i = 0; i < points.length; i++) {\n                for (var j = 0; j < points.length; j++) {\n                    if (matrix[points[i]][points[j]] === undefined) {\n                        addCentricPattern(matrices, alignmentPattern, points[i] - 2, points[j] - 2);\n                    }\n                }\n            }\n        };\n        var addTimingFunctions = function (matrices) {\n            var row = 6, column = 6, value = 1, modules = matrices[0].length;\n            for (var i = 8; i < modules - 8; i++) {\n                fillFunctionCell(matrices, value, row, i);\n                fillFunctionCell(matrices, value, i, column);\n                value ^= 1;\n            }\n        };\n        var scoreMaskMatrixes = function (matrices) {\n            var scores = [], previousBits = [], darkModules = [], patterns = [], adjacentSameBits = [], matrix, i, row = 0, column = 1, modules = matrices[0].length;\n            for (i = 0; i < matrices.length; i++) {\n                scores[i] = 0;\n                darkModules[i] = 0;\n                adjacentSameBits[i] = [\n                    0,\n                    0\n                ];\n                patterns[i] = [\n                    0,\n                    0\n                ];\n                previousBits[i] = [];\n            }\n            for (i = 0; i < modules; i++) {\n                for (var j = 0; j < modules; j++) {\n                    for (var k = 0; k < matrices.length; k++) {\n                        matrix = matrices[k];\n                        darkModules[k] += parseInt(matrix[i][j], 10);\n                        if (previousBits[k][row] === matrix[i][j] && i + 1 < modules && j - 1 >= 0 && matrix[i + 1][j] == previousBits[k][row] && matrix[i + 1][j - 1] == previousBits[k][row]) {\n                            scores[k] += 3;\n                        }\n                        scoreFinderPatternOccurance(k, patterns, scores, row, matrix[i][j]);\n                        scoreFinderPatternOccurance(k, patterns, scores, column, matrix[j][i]);\n                        scoreAdjacentSameBits(k, scores, previousBits, matrix[i][j], adjacentSameBits, row);\n                        scoreAdjacentSameBits(k, scores, previousBits, matrix[j][i], adjacentSameBits, column);\n                    }\n                }\n            }\n            var total = modules * modules, minIdx, min = Number.MAX_VALUE;\n            for (i = 0; i < scores.length; i++) {\n                scores[i] += calculateDarkModulesRatioScore(darkModules[i], total);\n                if (scores[i] < min) {\n                    min = scores[i];\n                    minIdx = i;\n                }\n            }\n            return minIdx;\n        };\n        function scoreFinderPatternOccurance(idx, patterns, scores, rowColumn, bit) {\n            patterns[idx][rowColumn] = (patterns[idx][rowColumn] << 1 ^ bit) % 128;\n            if (patterns[idx][rowColumn] == finderPatternValue) {\n                scores[idx] += 40;\n            }\n        }\n        function scoreAdjacentSameBits(idx, scores, previousBits, bit, adjacentBits, rowColumn) {\n            if (previousBits[idx][rowColumn] == bit) {\n                adjacentBits[idx][rowColumn]++;\n            } else {\n                previousBits[idx][rowColumn] = bit;\n                if (adjacentBits[idx][rowColumn] >= 5) {\n                    scores[idx] += 3 + adjacentBits[idx][rowColumn] - 5;\n                }\n                adjacentBits[idx][rowColumn] = 1;\n            }\n        }\n        function calculateDarkModulesRatioScore(darkModules, total) {\n            var percent = Math.floor(darkModules / total * 100), mod5 = percent % 5, previous = Math.abs(percent - mod5 - 50), next = Math.abs(percent + 5 - mod5 - 50), score = 10 * Math.min(previous / 5, next / 5);\n            return score;\n        }\n        var EncodingResult = function (dataString, version) {\n            this.dataString = dataString;\n            this.version = version;\n        };\n        var IsoEncoder = function () {\n            this.getEncodingResult = function (inputString, errorCorrectionLevel) {\n                var modes = getModes(inputString), dataCodewordsCount = getDataCodewordsCount(modes), version = getVersion(dataCodewordsCount, errorCorrectionLevel), dataString = getDataString(modes, version);\n                return new EncodingResult(dataString, version);\n            };\n        };\n        var UTF8Encoder = function () {\n            this.mode = modeInstances[this.encodingMode];\n        };\n        UTF8Encoder.fn = UTF8Encoder.prototype = {\n            encodingMode: BYTE,\n            utfBOM: '111011111011101110111111',\n            initialModeCountStringLength: 20,\n            getEncodingResult: function (inputString, errorCorrectionLevel) {\n                var that = this, data = that.encode(inputString), dataCodewordsCount = that.getDataCodewordsCount(data), version = getVersion(dataCodewordsCount, errorCorrectionLevel), dataString = that.mode.getModeCountString(data.length / 8, version) + data;\n                return new EncodingResult(dataString, version);\n            },\n            getDataCodewordsCount: function (data) {\n                var that = this, dataLength = data.length, dataCodewordsCount = Math.ceil((that.initialModeCountStringLength + dataLength) / 8);\n                return dataCodewordsCount;\n            },\n            encode: function (str) {\n                var that = this, result = that.utfBOM;\n                for (var i = 0; i < str.length; i++) {\n                    result += that.encodeCharacter(str.charCodeAt(i));\n                }\n                return result;\n            },\n            encodeCharacter: function (code) {\n                var bytesCount = this.getBytesCount(code), bc = bytesCount - 1, result = '';\n                if (bytesCount == 1) {\n                    result = toBitsString(code, 8);\n                } else {\n                    var significantOnes = 8 - bytesCount;\n                    for (var i = 0; i < bc; i++) {\n                        result = toBitsString(code >> i * 6 & 63 | 128, 8) + result;\n                    }\n                    result = (code >> bc * 6 | 255 >> significantOnes << significantOnes).toString(2) + result;\n                }\n                return result;\n            },\n            getBytesCount: function (code) {\n                var ranges = this.ranges;\n                for (var i = 0; i < ranges.length; i++) {\n                    if (code < ranges[i]) {\n                        return i + 1;\n                    }\n                }\n            },\n            ranges: [\n                128,\n                2048,\n                65536,\n                2097152,\n                67108864\n            ]\n        };\n        var QRCodeDataEncoder = function (encoding) {\n            if (encoding && encoding.toLowerCase().indexOf('utf_8') >= 0) {\n                return new UTF8Encoder();\n            } else {\n                return new IsoEncoder();\n            }\n        };\n        var encodeData = function (inputString, errorCorrectionLevel, encoding) {\n            var encoder = new QRCodeDataEncoder(encoding), encodingResult = encoder.getEncodingResult(inputString, errorCorrectionLevel), version = encodingResult.version, versionInformation = versionsCodewordsInformation[version - 1][errorCorrectionLevel], dataString = padDataString(encodingResult.dataString, versionInformation.totalDataCodewords), blocks = getBlocks(dataString, versionInformation), matrices = initMatrices(version);\n            addFinderPatterns(matrices);\n            addAlignmentPatterns(matrices, version);\n            addTimingFunctions(matrices);\n            if (version >= 7) {\n                addVersionInformation(matrices, toBitsString(0, 18));\n            }\n            addFormatInformation(matrices, toBitsString(0, 15));\n            fillData(matrices, blocks);\n            var minIdx = scoreMaskMatrixes(matrices), optimalMatrix = matrices[minIdx];\n            if (version >= 7) {\n                addVersionInformation([optimalMatrix], encodeVersionInformation(version));\n            }\n            var formatString = errorCorrectionPatterns[errorCorrectionLevel] + toBitsString(minIdx, 3);\n            addFormatInformation([optimalMatrix], encodeFormatInformation(formatString));\n            return optimalMatrix;\n        };\n        var QRCodeDefaults = {\n            DEFAULT_SIZE: 200,\n            QUIET_ZONE_LENGTH: 4,\n            DEFAULT_ERROR_CORRECTION_LEVEL: 'L',\n            DEFAULT_BACKGROUND: '#fff',\n            DEFAULT_DARK_MODULE_COLOR: '#000',\n            MIN_BASE_UNIT_SIZE: 1\n        };\n        var QRCode = Widget.extend({\n            init: function (element, options) {\n                var that = this;\n                Widget.fn.init.call(that, element, options);\n                that.element = $(element);\n                that.wrapper = that.element;\n                that.element.addClass('k-qrcode');\n                that.surfaceWrap = $('<div />').css('position', 'relative').appendTo(this.element);\n                that.surface = draw.Surface.create(that.surfaceWrap, { type: that.options.renderAs });\n                that.setOptions(options);\n            },\n            redraw: function () {\n                var size = this._getSize();\n                this.surfaceWrap.css({\n                    width: size,\n                    height: size\n                });\n                this.surface.clear();\n                this.createVisual();\n                this.surface.draw(this.visual);\n            },\n            getSize: function () {\n                return kendo.dimensions(this.element);\n            },\n            _resize: function () {\n                this.redraw();\n            },\n            createVisual: function () {\n                this.visual = this._render();\n            },\n            exportVisual: function () {\n                return this._render();\n            },\n            _render: function () {\n                var that = this, value = that._value, baseUnit, border = that.options.border || {}, padding = that.options.padding || 0, borderWidth = border.width || 0, quietZoneSize, matrix, size, dataSize, contentSize;\n                border.width = borderWidth;\n                var visual = new draw.Group();\n                if (value) {\n                    matrix = encodeData(value, that.options.errorCorrection, that.options.encoding);\n                    size = that._getSize();\n                    contentSize = size - 2 * (borderWidth + padding);\n                    baseUnit = that._calculateBaseUnit(contentSize, matrix.length);\n                    dataSize = matrix.length * baseUnit;\n                    quietZoneSize = borderWidth + padding + (contentSize - dataSize) / 2;\n                    visual.append(that._renderBackground(size, border));\n                    visual.append(that._renderMatrix(matrix, baseUnit, quietZoneSize));\n                }\n                return visual;\n            },\n            _getSize: function () {\n                var that = this, size;\n                if (that.options.size) {\n                    size = parseInt(that.options.size, 10);\n                } else {\n                    var element = that.element, min = Math.min(element.width(), element.height());\n                    if (min > 0) {\n                        size = min;\n                    } else {\n                        size = QRCodeDefaults.DEFAULT_SIZE;\n                    }\n                }\n                return size;\n            },\n            _calculateBaseUnit: function (size, matrixSize) {\n                var baseUnit = Math.floor(size / matrixSize);\n                if (baseUnit < QRCodeDefaults.MIN_BASE_UNIT_SIZE) {\n                    throw new Error('Insufficient size.');\n                }\n                if (baseUnit * matrixSize >= size && baseUnit - 1 >= QRCodeDefaults.MIN_BASE_UNIT_SIZE) {\n                    baseUnit--;\n                }\n                return baseUnit;\n            },\n            _renderMatrix: function (matrix, baseUnit, quietZoneSize) {\n                var path = new draw.MultiPath({\n                    fill: { color: this.options.color },\n                    stroke: null\n                });\n                for (var row = 0; row < matrix.length; row++) {\n                    var y = quietZoneSize + row * baseUnit;\n                    var column = 0;\n                    while (column < matrix.length) {\n                        while (matrix[row][column] === 0 && column < matrix.length) {\n                            column++;\n                        }\n                        if (column < matrix.length) {\n                            var x = column;\n                            while (matrix[row][column] == 1) {\n                                column++;\n                            }\n                            var x1 = round(quietZoneSize + x * baseUnit);\n                            var y1 = round(y);\n                            var x2 = round(quietZoneSize + column * baseUnit);\n                            var y2 = round(y + baseUnit);\n                            path.moveTo(x1, y1).lineTo(x1, y2).lineTo(x2, y2).lineTo(x2, y1).close();\n                        }\n                    }\n                }\n                return path;\n            },\n            _renderBackground: function (size, border) {\n                var box = Box2D(0, 0, size, size).unpad(border.width / 2);\n                return draw.Path.fromRect(box.toRect(), {\n                    fill: { color: this.options.background },\n                    stroke: {\n                        color: border.color,\n                        width: border.width\n                    }\n                });\n            },\n            setOptions: function (options) {\n                var that = this;\n                options = options || {};\n                that.options = extend(that.options, options);\n                if (options.value !== undefined) {\n                    that._value = that.options.value + '';\n                }\n                that.redraw();\n            },\n            value: function (value) {\n                var that = this;\n                if (value === undefined) {\n                    return that._value;\n                }\n                that._value = value + '';\n                that.redraw();\n            },\n            options: {\n                name: 'QRCode',\n                renderAs: 'svg',\n                encoding: 'ISO_8859_1',\n                value: '',\n                errorCorrection: QRCodeDefaults.DEFAULT_ERROR_CORRECTION_LEVEL,\n                background: QRCodeDefaults.DEFAULT_BACKGROUND,\n                color: QRCodeDefaults.DEFAULT_DARK_MODULE_COLOR,\n                size: '',\n                padding: 0,\n                border: {\n                    color: '',\n                    width: 0\n                }\n            }\n        });\n        dataviz.ExportMixin.extend(QRCode.fn);\n        dataviz.ui.plugin(QRCode);\n        kendo.deepExtend(dataviz, {\n            QRCode: QRCode,\n            QRCodeDefaults: QRCodeDefaults,\n            QRCodeFunctions: {\n                FreeCellVisitor: FreeCellVisitor,\n                fillData: fillData,\n                padDataString: padDataString,\n                generateErrorCodewords: generateErrorCodewords,\n                xorPolynomials: xorPolynomials,\n                getBlocks: getBlocks,\n                multiplyPolynomials: multiplyPolynomials,\n                chooseMode: chooseMode,\n                getModes: getModes,\n                getDataCodewordsCount: getDataCodewordsCount,\n                getVersion: getVersion,\n                getDataString: getDataString,\n                encodeFormatInformation: encodeFormatInformation,\n                encodeBCH: encodeBCH,\n                dividePolynomials: dividePolynomials,\n                initMatrices: initMatrices,\n                addFormatInformation: addFormatInformation,\n                encodeVersionInformation: encodeVersionInformation,\n                addVersionInformation: addVersionInformation,\n                addCentricPattern: addCentricPattern,\n                addFinderSeparator: addFinderSeparator,\n                addFinderPatterns: addFinderPatterns,\n                addAlignmentPatterns: addAlignmentPatterns,\n                addTimingFunctions: addTimingFunctions,\n                scoreMaskMatrixes: scoreMaskMatrixes,\n                encodeData: encodeData,\n                UTF8Encoder: UTF8Encoder\n            },\n            QRCodeFields: {\n                modes: modeInstances,\n                powersOfTwo: powersOfTwo,\n                powersOfTwoResult: powersOfTwoResult,\n                generatorPolynomials: generatorPolynomials\n            }\n        });\n    }(window.kendo.jQuery));\n    return window.kendo;\n}, typeof define == 'function' && define.amd ? define : function (a1, a2, a3) {\n    (a3 || a2)();\n}));"],"sourceRoot":"/source/"}